@page "/ranking/{TrackId:int}"

@using DexQuiz.Client.Features.Dashboard
@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

@inherits BlazorStateComponent

<div class="container-fluid vh-100" style="background: #E5E5E5;">
    <Toolbar ShowBackButton="true" />
    <div class="row align-items-center" style="height: 100px">
        <div class="col-12 my-auto text-center dashboard-progress">
            <h5 class="mt-4">Ranking @Track.Name</h5>
        </div>
    </div>
    <div class="row align-items-center" style="height: calc(100% - 215px);">
        <div class="col-12 col-md-10 offset-md-1 col-lg-8 offset-lg-2" style="height: 95% !important;">
            <div class="ranking h-100">
                <div class="card h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="text-center mb-5">
                            @if (State.IsLoading)
                            {
                                <div class="row">
                                    <div class="col-12 mb-2">
                                        <div>
                                            <svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.0" width="158px" height="24px" viewBox="0 0 158 24" xml:space="preserve"><path fill="#e3e3e3" d="M64 4h10v10H64V4zm20 0h10v10H84V4zm20 0h10v10h-10V4zm20 0h10v10h-10V4zm20 0h10v10h-10V4zM4 4h10v10H4V4zm20 0h10v10H24V4zm20 0h10v10H44V4z" /><path fill="#bdbdbd" d="M144 14V4h10v10h-10zm9-9h-8v8h8V5zm-29 9V4h10v10h-10zm9-9h-8v8h8V5zm-29 9V4h10v10h-10zm9-9h-8v8h8V5zm-29 9V4h10v10H84zm9-9h-8v8h8V5zm-29 9V4h10v10H64zm9-9h-8v8h8V5zm-29 9V4h10v10H44zm9-9h-8v8h8V5zm-29 9V4h10v10H24zm9-9h-8v8h8V5zM4 14V4h10v10H4zm9-9H5v8h8V5z" /><g><path fill="#d9d9d9" d="M-58 16V2h14v14h-14zm13-13h-12v12h12V3z" /><path fill="#9c9c9c" fill-opacity="0.3" d="M-40 0h18v18h-18z" /><path fill="#b2b2b2" d="M-40 18V0h18v18h-18zm17-17h-16v16h16V1z" /><path fill="#9c9c9c" fill-opacity="0.7" d="M-20 0h18v18h-18z" /><path fill="#4c4c4c" d="M-20 18V0h18v18h-18zM-3 1h-16v16h16V1z" /><animateTransform attributeName="transform" type="translate" values="20 0;40 0;60 0;80 0;100 0;120 0;140 0;160 0;180 0;200 0" calcMode="discrete" dur="1800ms" repeatCount="indefinite" /></g></svg>
                                        </div>
                                    </div>
                                </div>
                            }
                            else if (Track.Rankings == null || !Track.Rankings.Any())
                            {
                                <div class="row">
                                    <div class="col-12 mb-2">
                                        <div>
                                            <h5 class="d-inline text-center"><small>Seja o primeiro a fazer o desafio desta trilha!</small></h5>
                                        </div>
                                    </div>
                                </div>
                            }
                            else if (Track.Rankings != null)
                            {
                                foreach (var ranking in Track.Rankings.OrderByDescending(r => r.Points).ThenBy(r => r.CompletedTime))
                                {
                                    <div class="row">
                                        <div class="col-12 mb-2">
                                            <div>
                                                <h5 class="d-inline float-left"><strong>@ranking.Position.</strong> @FormatName(ranking.Username)</h5>
                                                <span class="badge badge-secondary float-right">@ranking.Points</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="height: 50px; background: #fff;">
        <div class="col-12">
            <ul class="nav nav-pills nav-fill">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-house" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M2 13.5V7h1v6.5a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5V7h1v6.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5zm11-11V6l-2-2V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z" />
                            <path fill-rule="evenodd" d="M7.293 1.5a1 1 0 0 1 1.414 0l6.647 6.646a.5.5 0 0 1-.708.708L8 2.207 1.354 8.854a.5.5 0 1 1-.708-.708L7.293 1.5z" />
                        </svg>
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/awards" Match="NavLinkMatch.All">
                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-check2" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z" />
                        </svg>
                    </NavLink>
                </li>
            </ul>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int TrackId { get; set; }

    DashboardState State => GetState<DashboardState>();

    TrackWithRankingsModel Track = new TrackWithRankingsModel();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Track = State.Tracks.FirstOrDefault(t => t.Id == TrackId);
        if (Track == null)
        {
            NavManager.NavigateTo("/");
        }
    }

    private string FormatName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            return "Participante";
        }

        var names = name.Split(" ");
        if (names.Count() > 1)
        {
            return names.FirstOrDefault() + " " + names.LastOrDefault();
        }
        else
        {
            return names.FirstOrDefault();
        }
    }
}