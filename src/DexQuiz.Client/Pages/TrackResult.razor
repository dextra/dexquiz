@page "/track-result/{TrackId:int}"

@using DexQuiz.Client.Features.Track
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

@inherits BlazorStateComponent

<div class="container-fluid vh-100" style="background: #E5E5E5;">
    <Toolbar ShowBackButton="true" />
    <div class="row align-items-center" style="height: 100px">
        <div class="col-12 my-auto text-center dashboard-progress">
            <h5 class="mt-4">@State?.Track?.Name</h5>
        </div>
    </div>
    <div class="row align-items-baseline" style="height: calc(100% - 215px);">
        <div class="col-12 col-md-10 offset-md-1 col-lg-8 offset-lg-2">
            <div class="track-result h-100">
                <div class="card h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="mb-5" style="font-size: 21px;">
                            <div class="row">
                                <div class="col-12 text-center">
                                    <img src="/images/track-result.png" />
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-12 mb-2 pretrack-text">
                                    <p style="font-size: 26px;"><strong>Parabéns</strong></p>
                                    @if (State.IsLoading)
                                    {
                                        <p class="text-center">
                                            <svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.0" width="158px" height="24px" viewBox="0 0 158 24" xml:space="preserve"><path fill="#e3e3e3" d="M64 4h10v10H64V4zm20 0h10v10H84V4zm20 0h10v10h-10V4zm20 0h10v10h-10V4zm20 0h10v10h-10V4zM4 4h10v10H4V4zm20 0h10v10H24V4zm20 0h10v10H44V4z" /><path fill="#bdbdbd" d="M144 14V4h10v10h-10zm9-9h-8v8h8V5zm-29 9V4h10v10h-10zm9-9h-8v8h8V5zm-29 9V4h10v10h-10zm9-9h-8v8h8V5zm-29 9V4h10v10H84zm9-9h-8v8h8V5zm-29 9V4h10v10H64zm9-9h-8v8h8V5zm-29 9V4h10v10H44zm9-9h-8v8h8V5zm-29 9V4h10v10H24zm9-9h-8v8h8V5zM4 14V4h10v10H4zm9-9H5v8h8V5z" /><g><path fill="#d9d9d9" d="M-58 16V2h14v14h-14zm13-13h-12v12h12V3z" /><path fill="#9c9c9c" fill-opacity="0.3" d="M-40 0h18v18h-18z" /><path fill="#b2b2b2" d="M-40 18V0h18v18h-18zm17-17h-16v16h16V1z" /><path fill="#9c9c9c" fill-opacity="0.7" d="M-20 0h18v18h-18z" /><path fill="#4c4c4c" d="M-20 18V0h18v18h-18zM-3 1h-16v16h16V1z" /><animateTransform attributeName="transform" type="translate" values="20 0;40 0;60 0;80 0;100 0;120 0;140 0;160 0;180 0;200 0" calcMode="discrete" dur="1800ms" repeatCount="indefinite" /></g></svg>
                                        </p>
                                    }
                                    else
                                    {
                                        <p>
                                            Sua pontuação foi de <strong>@State?.TrackResult?.Points pontos.</strong><br />Tempo total: @State?.TrackResult?.CompletedTimeSpan().ToString(@"hh\:mm\:ss")
                                        </p>
                                    }
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-12 text-center">
                                    @if (!State.IsLoading)
                                    {
                                        <NavLink class="btn btn-secondary w-100" href="/">
                                            CONCLUIR
                                        </NavLink>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int TrackId { get; set; }

    TrackState State => GetState<TrackState>();

    protected override async Task OnParametersSetAsync()
    {
        await Mediator.Send(new TrackState.GetTrackResultAction(TrackId));
        StateHasChanged();
    }
}