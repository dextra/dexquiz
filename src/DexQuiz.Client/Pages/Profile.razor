@page "/profile"

@using DexQuiz.Client.Features.Authentication

@attribute [Authorize]

@inherits BlazorStateComponent

<div class="container-fluid vh-100" style="background: #E5E5E5;">
    <div class="row" style="height: 65px; background: #000;">
        <div class="col-3 col-md-3 offset-md-1 col-lg-3 offset-lg-1 my-auto app-title">
            <NavLink style="color: #fff; white-space: nowrap;" href="/">
                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-chevron-left" fill="currentColor" xmlns="http://www.w3.org/2000/svg" style="display: inline; margin-right: 10px; margin-top: -2px;">
                    <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" />
                </svg>
                DexQuiz
            </NavLink>
        </div>
        <div class="col-6 col-md-4 col-lg-4 my-auto text-center">
            <img src="/images/logo-dextra-new.png" style="max-height: 35px;" />
        </div>
        <div class="col-3 col-md-3 offset-md-1 col-lg-3 offset-lg-1 my-auto menu-icon text-center" style="color: #A994B3;">
            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-list" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M2.5 11.5A.5.5 0 0 1 3 11h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4A.5.5 0 0 1 3 7h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4A.5.5 0 0 1 3 3h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z" />
            </svg>
        </div>
    </div>
    <div class="row align-items-center" style="height: 100px">
        <div class="col-12 my-auto text-center dashboard-progress">
            <h5 class="mt-4">Minha Conta</h5>
        </div>
    </div>
    <div class="row align-items-baseline" style="height: calc(100% - 215px);">
        <div class="col-12 col-md-10 offset-md-1 col-lg-8 offset-lg-2">
            <div class="track-result h-100">
                <div class="card h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="mb-5" style="font-size: 21px;">
                            @if (State.IsLoading)
                            {
                                <div class="row mt-3">
                                    <div class="col-12 mb-2 pretrack-text">
                                        <svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.0" width="158px" height="24px" viewBox="0 0 158 24" xml:space="preserve"><path fill="#e3e3e3" d="M64 4h10v10H64V4zm20 0h10v10H84V4zm20 0h10v10h-10V4zm20 0h10v10h-10V4zm20 0h10v10h-10V4zM4 4h10v10H4V4zm20 0h10v10H24V4zm20 0h10v10H44V4z" /><path fill="#bdbdbd" d="M144 14V4h10v10h-10zm9-9h-8v8h8V5zm-29 9V4h10v10h-10zm9-9h-8v8h8V5zm-29 9V4h10v10h-10zm9-9h-8v8h8V5zm-29 9V4h10v10H84zm9-9h-8v8h8V5zm-29 9V4h10v10H64zm9-9h-8v8h8V5zm-29 9V4h10v10H44zm9-9h-8v8h8V5zm-29 9V4h10v10H24zm9-9h-8v8h8V5zM4 14V4h10v10H4zm9-9H5v8h8V5z" /><g><path fill="#d9d9d9" d="M-58 16V2h14v14h-14zm13-13h-12v12h12V3z" /><path fill="#9c9c9c" fill-opacity="0.3" d="M-40 0h18v18h-18z" /><path fill="#b2b2b2" d="M-40 18V0h18v18h-18zm17-17h-16v16h16V1z" /><path fill="#9c9c9c" fill-opacity="0.7" d="M-20 0h18v18h-18z" /><path fill="#4c4c4c" d="M-20 18V0h18v18h-18zM-3 1h-16v16h16V1z" /><animateTransform attributeName="transform" type="translate" values="20 0;40 0;60 0;80 0;100 0;120 0;140 0;160 0;180 0;200 0" calcMode="discrete" dur="1800ms" repeatCount="indefinite" /></g></svg>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="row mt-3">
                                    <div class="col-12 mb-2 pretrack-text">
                                        <p><strong>Email:</strong> @State.User?.Name</p>
                                    </div>
                                </div>
                                <div class="row mt-1">
                                    <div class="col-12 mb-2 pretrack-text">
                                        <p><strong>Celular:</strong> @State.User?.Email</p>
                                    </div>
                                </div>
                                <div class="row mt-1">
                                    <div class="col-12 mb-2 pretrack-text">
                                        <p><strong>Celular:</strong> @State.User?.CellPhone</p>
                                    </div>
                                </div>
                                <div class="row mt-1">
                                    <div class="col-12 mb-2 pretrack-text">
                                        <p><strong>LinkedIn:</strong> @State.User?.Linkedin</p>
                                    </div>
                                </div>
                                <div class="row mt-3">
                                    <div class="col-12">
                                        <button class="btn btn-secondary text-white w-100" type="button" @onclick="Logout">
                                            Sair
                                        </button>
                                    </div>
                                </div>
                                <div class="row mt-1 mt-md-3">
                                    <div class="col-12">
                                        <NavLink class="btn btn-danger text-white w-100" href="/remove-account">
                                            Remover minha conta
                                        </NavLink>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    AuthState State => GetState<AuthState>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Mediator.Send(new AuthState.RefreshUserDataAction());
        }
    }

    private async Task Logout()
    {
        await Mediator.Send(new AuthState.LogoutAction());
    }
}